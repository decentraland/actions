name: AI Pull Request Review

on:
  workflow_call:
    inputs:
      force_refresh:
        description: 'Force refresh analysis (ignore cache)'
        required: false
        default: false
        type: boolean
    secrets:
      ANTHROPIC_API_KEY:
        required: true
  workflow_dispatch:
    inputs:
      force_refresh:
        description: 'Force refresh analysis (ignore cache)'
        required: false
        default: false
        type: boolean

jobs:
  ai-review:
    runs-on: ubuntu-latest
    environment: ai-review

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests>=2.31.0 anthropic>=0.7.0

      - name: Download AI Reviewer Script
        run: |
          curl -o ai_reviewer.py "https://raw.githubusercontent.com/decentraland/actions/main/scripts/ai_pr_reviewer/index.py"

      - name: Run AI PR Review
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          PR_NUMBER: ${{ github.event.pull_request.number || github.event.issue.number }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          python ai_reviewer.py \
            --pr-number "$PR_NUMBER" \
            --repo-owner "$REPO_OWNER" \
            --repo-name "$REPO_NAME"

      - name: Comment on PR
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number || github.event.issue.number }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          # Debug: Show what we're looking for
          echo "üîç Looking for PR number: $PR_NUMBER"
          echo "üîç Search pattern: review_comment_pr_${PR_NUMBER}_*.md"
          echo "üîç Files in output directory:"
          ls -la output/ || echo "Output directory does not exist"
          echo ""
          
          # Find the generated comment file using exact pattern
          COMMENT_FILE=$(find output -name "review_comment_pr_${PR_NUMBER}_*.md" | head -1)
          echo "üîç Found file"
          
          if [ -f "$COMMENT_FILE" ]; then
            python -c "
          import requests
          import os
          import json
          import sys
          
          # Read comment from the found file
          comment_file = '$COMMENT_FILE'
          with open(comment_file, 'r') as f:
              comment = f.read()
          
          # Post comment
          url = f'https://api.github.com/repos/{os.getenv(\"REPO_OWNER\")}/{os.getenv(\"REPO_NAME\")}/issues/{os.getenv(\"PR_NUMBER\")}/comments'
          headers = {
              'Authorization': f'token {os.getenv(\"GITHUB_TOKEN\")}',
              'Accept': 'application/vnd.github.v3+json'
          }
          data = {'body': comment}
          
          response = requests.post(url, headers=headers, json=data)
          if response.status_code == 201:
              print('‚úÖ Comment posted successfully')
          else:
              print(f'‚ùå Failed to post comment: {response.status_code}')
          "
          else
            echo "‚ùå No comment file found in output directory"
          fi
